{"version":3,"sources":["components/Error.jsx","components/Pregunta.jsx","components/Formulario.jsx","components/Gasto.jsx","components/Listado.jsx","helpers.js","components/ControlPresupuesto.jsx","App.js","serviceWorker.js","index.js"],"names":["Error","mensaje","className","Pregunta","guardarPresupuesto","guardarRestante","actualizarPregunta","useState","cantidad","guardarCantidad","error","guardarError","onSubmit","e","preventDefault","isNaN","type","placeholder","onChange","parseInt","target","value","Formulario","guardarGasto","guardarCrearGasto","nombre","guardarNombre","trim","gasto","id","shortid","generate","console","log","Gasto","Listado","gastos","map","key","revisarPresupuesto","presupuesto","restante","ControlPresupuesto","App","mostrarpregunta","guardarGastos","creargasto","useEffect","presupuestoRestante","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.79826441.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types';\n\nconst Error = ({mensaje}) => ( \n<p className=\"alert alert-danger error\">{mensaje}</p>\n );\n Error.propTypes = {\n    mensaje: PropTypes.string.isRequired\n}\nexport default Error;","import React, { Fragment, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Error from \"./Error\";\n\nconst Pregunta = ({\n  guardarPresupuesto,\n  guardarRestante,\n  actualizarPregunta,\n}) => {\n  // Funcion que lee el presupuesto\n  const definirPresupuesto = (e) => {\n    guardarCantidad(parseInt(e.target.value));\n  };\n\n  // El state en hooks\n  const [cantidad, guardarCantidad] = useState(0);\n  const [error, guardarError] = useState(false);\n\n  //   Submit para agregar el presupuesto\n  const agregarPresupuesto = (e) => {\n    e.preventDefault();\n    //   Validar\n    if (cantidad < 1 || isNaN(cantidad)) {\n      guardarError(true);\n      return;\n    }\n    // Si se pasa la validacion\n    guardarError(false);\n    guardarPresupuesto(cantidad);\n    guardarRestante(cantidad);\n    actualizarPregunta(false);\n  };\n\n  return (\n    <Fragment>\n      <h2>Coloca tu presupuesto</h2>\n\n      {error ? <Error mensaje=\"El Presupuesto es Incorrecto\" /> : null}\n\n      <form onSubmit={agregarPresupuesto}>\n        <input\n          type=\"number\"\n          className=\"u-full-width\"\n          placeholder=\"Coloca tu presupuesto\"\n          onChange={definirPresupuesto}\n        />\n        <input\n          type=\"submit\"\n          className=\"button-primary u-full-width\"\n          value=\"Definir Presupuesto\"\n        />\n      </form>\n    </Fragment>\n  );\n};\n\nPregunta.propTypes = {\n  guardarPresupuesto: PropTypes.func.isRequired,\n  guardarRestante: PropTypes.func.isRequired,\n  actualizarPregunta: PropTypes.func.isRequired,\n};\n\nexport default Pregunta;\n","import React, { useState } from \"react\";\nimport PropTypes from 'prop-types';\nimport shortid from \"shortid\";\nimport Error from \"./Error\";\n\nconst Formulario = ({ guardarGasto, guardarCrearGasto }) => {\n  const [nombre, guardarNombre] = useState(\"\");\n  const [cantidad, guardarCantidad] = useState(0);\n  const [error, guardarError] = useState(false);\n\n  // cuando el usuario agrega un gasto\n  const agregarGasto = (e) => {\n    e.preventDefault();\n\n    // validar\n    if (cantidad < 1 || isNaN(cantidad) || nombre.trim() === \"\") {\n      guardarError(true);\n      return;\n    }\n    guardarError(false);\n\n    // construir el gasto\n    const gasto = {\n      nombre,\n      cantidad,\n      id: shortid.generate(),\n    };\n\n    console.log(gasto);\n\n    // pasar el gasto al componente principal\n    guardarGasto(gasto);\n    guardarCrearGasto(true);\n\n    // resetear el form\n    guardarNombre(\"\");\n    guardarCantidad(0);\n  };\n\n  return (\n    <form onSubmit={agregarGasto}>\n      <h2>Agrega tus gastos aqu√≠</h2>\n\n      {error ? (\n        <Error mensaje=\"Ambos campos son obligatorios o Presupuesto Incorrecto\" />\n      ) : null}\n\n      <div className=\"campo\">\n        <label>Nombre Gasto</label>\n        <input\n          type=\"text\"\n          className=\"u-full-width\"\n          placeholder=\"Ej. Transporte\"\n          value={nombre}\n          onChange={(e) => guardarNombre(e.target.value)}\n        />\n      </div>\n\n      <div className=\"campo\">\n        <label>Cantidad Gasto</label>\n        <input\n          type=\"number\"\n          className=\"u-full-width\"\n          placeholder=\"Ej. 300\"\n          value={cantidad}\n          onChange={(e) => guardarCantidad(parseInt(e.target.value, 10))}\n        />\n      </div>\n\n      <input\n        type=\"submit\"\n        className=\"button-primary u-full-width\"\n        value=\"Agregar Gasto\"\n      />\n    </form>\n  );\n};\nFormulario.propTypes = {\n    guardarGasto: PropTypes.func.isRequired,\n    guardarCrearGasto: PropTypes.func.isRequired\n}\n\nexport default Formulario;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\n\nconst Gasto = ({ gasto }) => (\n  <li className=\"gastos\">\n    <p>\n      {gasto.nombre}\n\n      <span className=\"gasto\">$ {gasto.cantidad} </span>\n    </p>\n  </li>\n);\nGasto.propTypes = {\n    gasto: PropTypes.object.isRequired\n}\n\nexport default Gasto;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport Gasto from \"./Gasto\";\n\nconst Listado = ({ gastos }) => (\n  <div className=\"gastos-realizados\">\n    <h2>Listado</h2>\n    {gastos.map((gasto) => (\n      <Gasto key={gasto.id} gasto={gasto} />\n    ))}\n  </div>\n);\nListado.propTypes = {\n    gastos: PropTypes.array.isRequired\n}\nexport default Listado;\n","export const revisarPresupuesto = (presupuesto, restante) => {\n    let clase;\n\n    if( ( presupuesto / 4 ) > restante ) {\n        clase = 'alert alert-danger';\n    } else if ( (presupuesto / 2) > restante ) {\n        clase = 'alert alert-warning';\n    } else {\n        clase = 'alert alert-success';\n    }\n\n    return clase;\n} ","import React, { Fragment} from 'react';\nimport PropTypes from 'prop-types';\nimport { revisarPresupuesto } from '../helpers';\n\nconst ControlPresupuesto = ({presupuesto, restante}) => {\n    return ( \n        <Fragment>\n            <div className=\"alert alert-primary\">\n                Presupuesto: $ {presupuesto}\n            </div>\n            <div className={revisarPresupuesto(presupuesto, restante)}>\n                Restante: $ {restante}\n            </div>\n        </Fragment>\n\n     );\n}\nControlPresupuesto.propTypes = {\n    presupuesto: PropTypes.number.isRequired,\n    restante: PropTypes.number.isRequired\n}\n\n\nexport default ControlPresupuesto; ","import React, { useState, useEffect } from 'react';\nimport Pregunta from './components/Pregunta';\nimport Formulario from './components/Formulario';\nimport Listado from './components/Listado';\nimport ControlPresupuesto from './components/ControlPresupuesto';\n\nfunction App() {\n\n  // definir el state\n  const [ presupuesto, guardarPresupuesto] = useState(0);\n  const [ restante, guardarRestante] = useState(0);\n  const [ mostrarpregunta, actualizarPregunta ] = useState(true);\n  const [ gastos, guardarGastos] = useState([]);\n  const [ gasto, guardarGasto ] = useState({});\n  const [ creargasto, guardarCrearGasto ] = useState(false);\n\n  // UseEffect que actualiza el restante\n\n  useEffect(() => {\n      if(creargasto) {\n\n          // agrega el nuevo presupuesto\n          guardarGastos([\n            ...gastos,\n            gasto\n          ]);\n\n          // resta del presupuesto actual\n          const presupuestoRestante = restante - gasto.cantidad;\n          guardarRestante(presupuestoRestante);\n\n          // Resetear a false\n          guardarCrearGasto(false);\n      }\n  }, [gasto, creargasto, gastos, restante]);\n\n\n  return (\n    <div className=\"container\">\n        <header>\n            <h1>Gasto Semanal</h1>\n\n            <div className=\"contenido-principal contenido\">\n              { mostrarpregunta ?  \n                ( \n                  <Pregunta \n                    guardarPresupuesto={guardarPresupuesto}\n                    guardarRestante={guardarRestante}\n                    actualizarPregunta={actualizarPregunta}\n                  />\n                )  :  (\n                  <div className=\"row\">\n                      <div className=\"one-half column\">\n                          <Formulario \n                            guardarGasto={guardarGasto}\n                            guardarCrearGasto={guardarCrearGasto}\n                          />\n                      </div>\n\n                      <div className=\"one-half column\">\n                         <Listado\n                            gastos={gastos}\n                         />\n\n                         <ControlPresupuesto \n                            presupuesto={presupuesto}\n                            restante={restante}\n                          />\n                      </div>\n                  </div>\n                ) \n              }\n            </div>\n        </header>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}